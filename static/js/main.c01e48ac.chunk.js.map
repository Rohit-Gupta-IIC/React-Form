{"version":3,"sources":["App.js","index.js"],"names":["mapboxgl","accessToken","App","mapContainer","useRef","map","useState","lng","setLng","lat","setLat","zoom","setZoom","start","useEffect","current","Map","container","style","center","on","getCenter","toFixed","getZoom","route","addControl","GeolocateControl","positionOptions","enableHighAccuracy","trackUserLocation","right","top","position","showUserHeading","addLayer","id","type","source","data","features","properties","geometry","coordinates","paint","event","coords","Object","keys","lngLat","key","end","getLayer","getSource","setData","getRoute","a","fetch","method","query","json","routes","geojson","layout","instructions","document","getElementById","steps","legs","tripInstructions","step","maneuver","instruction","innerHTML","Math","floor","duration","ref","className","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.c01e48ac.chunk.js","sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\nimport mapboxgl from 'mapbox-gl';\nimport './component/Map.css'\n\nmapboxgl.accessToken = 'pk.eyJ1Ijoicm9oaXRpaWMiLCJhIjoiY2t2eGkyanJ3Y2c2azMwczdtOGppa3N5ZyJ9.G4VtowYp1GEpWxvh3nRFVQ';\n\nconst App = () => {\n  const mapContainer = useRef(null);\n  const map = useRef(null);\n  const [lng, setLng] = useState(77.378);\n  const [lat, setLat] = useState(28.624);\n  const [zoom, setZoom] = useState(12);\n  const start = [lng, lat];\n\n  useEffect(() => {\n    if (map.current) return; // initialize map only once\n    map.current = new mapboxgl.Map({\n      container: mapContainer.current,\n      style: 'mapbox://styles/mapbox/streets-v11',\n      center: [lng, lat],\n      zoom: zoom\n    });\n    map.current.on('move', () => {\n      setLng(map.current.getCenter().lng.toFixed(4));\n      setLat(map.current.getCenter().lat.toFixed(4));\n      setZoom(map.current.getZoom().toFixed(2));\n    });\n    route();\n\n  }, [map.current]);\n\n  const locate = () => {\n    map.current.addControl(\n      new mapboxgl.GeolocateControl({\n        positionOptions: {\n          enableHighAccuracy: true,\n        },\n        // When active the map will receive updates to the device's location as it changes.\n        trackUserLocation: true,\n        style: {\n          right: 10,\n          top: 10\n        },\n        position: 'bottom-left',\n        // Draw an arrow next to the location dot to indicate which direction the device is heading.\n        showUserHeading: true\n      })\n    );\n  }\n\n  const route = () => {\n    locate();\n    map.current.on('load', () => {\n      // make an initial directions request that\n      // starts and ends at the same location\n      // getRoute(start);\n\n      // Add starting point to the map\n      map.current.addLayer({\n        id: 'point',\n        type: 'circle',\n        source: {\n          type: 'geojson',\n          data: {\n            type: 'FeatureCollection',\n            features: [\n              {\n                type: 'Feature',\n                properties: {},\n                geometry: {\n                  type: 'Point',\n                  coordinates: start\n                }\n              }\n            ]\n          }\n        },\n        paint: {\n          'circle-radius': 10,\n          'circle-color': '#3887be'\n        }\n      });\n\n      map.current.on('click', (event) => {\n        const coords = Object.keys(event.lngLat).map((key) => event.lngLat[key]);\n        const end = {\n          type: 'FeatureCollection',\n          features: [\n            {\n              type: 'Feature',\n              properties: {},\n              geometry: {\n                type: 'Point',\n                coordinates: coords\n              }\n            }\n          ]\n        };\n        if (map.current.getLayer('end')) {\n          map.current.getSource('end').setData(end);\n        } else {\n          map.current.addLayer({\n            id: 'end',\n            type: 'circle',\n            source: {\n              type: 'geojson',\n              data: {\n                type: 'FeatureCollection',\n                features: [\n                  {\n                    type: 'Feature',\n                    properties: {},\n                    geometry: {\n                      type: 'Point',\n                      coordinates: coords\n                    }\n                  }\n                ]\n              }\n            },\n            paint: {\n              'circle-radius': 10,\n              'circle-color': '#f30'\n            }\n          });\n        }\n        getRoute(coords);\n      });\n    });\n  }\n\n  async function getRoute(end) {\n    const query = await fetch(\n      `https://api.mapbox.com/directions/v5/mapbox/cycling/${start[0]},${start[1]};${end[0]},${end[1]}?steps=true&geometries=geojson&access_token=${mapboxgl.accessToken}`,\n      { method: 'GET' }\n    );\n    const json = await query.json();\n    const data = json.routes[0];\n    const route = data.geometry.coordinates;\n    const geojson = {\n      type: 'Feature',\n      properties: {},\n      geometry: {\n        type: 'LineString',\n        coordinates: route\n      }\n    };\n    // if the route already exists on the map, we'll reset it using setData\n    if (map.current.getSource('route')) {\n      map.current.getSource('route').setData(geojson);\n    }\n    // otherwise, we'll make a new request\n    else {\n      map.current.addLayer({\n        id: 'route',\n        type: 'line',\n        source: {\n          type: 'geojson',\n          data: geojson\n        },\n        layout: {\n          'line-join': 'round',\n          'line-cap': 'round'\n        },\n        paint: {\n          'line-color': '#3887be',\n          'line-width': 5,\n          'line-opacity': 0.75\n        }\n      });\n    }\n    // get the sidebar and add the instructions\n    const instructions = document.getElementById('instructions');\n    const steps = data.legs[0].steps;\n\n    let tripInstructions = '';\n    for (const step of steps) {\n      tripInstructions += `<li>${step.maneuver.instruction}</li>`;\n    }\n    instructions.innerHTML = `<p><strong>Trip duration: ${Math.floor(\n      data.duration / 60\n    )} min ðŸš´ </strong></p><ol>${tripInstructions}</ol>`;\n  }\n\n  return (\n    <>\n      <div ref={mapContainer} className=\"map-container\" />\n      <div id=\"instructions\" className=\"instructions\"></div>\n    </>\n  );\n};\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}